"use client"
import {
  Home,
  User,
  Trophy,
  Wallet,
  Gift,
  Sparkles,
  Settings,
  LogIn,
  ShoppingCart,
} from "lucide-react"
import Link from "next/link"
import { useState } from "react"
import { useSidebar } from "@/context/SidebarContext"
import { useRouting } from "@/context/RoutingContext"

const HouseIcon = () => (
  <svg
    width="26"
    height="26"
    viewBox="0 0 26 26"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M13.8859 0.866227L25.1359 12.1162C25.9234 12.9037 25.3659 14.25 24.2522 14.25H23.0022V21.75C23.0022 22.7445 22.6071 23.6984 21.9038 24.4016C21.2006 25.1049 20.2467 25.5 19.2522 25.5H18.0022V16.75C18.0022 15.7935 17.6368 14.8731 16.9806 14.1772C16.3244 13.4812 15.4271 13.0623 14.4722 13.0062L14.2522 13H11.7522C10.7576 13 9.8038 13.3951 9.10053 14.0983C8.39727 14.8016 8.00218 15.7554 8.00218 16.75V25.5H6.75218C5.75762 25.5 4.8038 25.1049 4.10053 24.4016C3.39727 23.6984 3.00218 22.7445 3.00218 21.75V14.25H1.75218C0.639685 14.25 0.0809348 12.9037 0.868435 12.1162L12.1184 0.866227C12.3528 0.631888 12.6707 0.500244 13.0022 0.500244C13.3336 0.500244 13.6515 0.631888 13.8859 0.866227ZM14.2522 15.5C14.5837 15.5 14.9016 15.6317 15.1361 15.8661C15.3705 16.1005 15.5022 16.4185 15.5022 16.75V25.5H10.5022V16.75C10.5022 16.4438 10.6146 16.1483 10.8181 15.9195C11.0215 15.6907 11.3019 15.5445 11.6059 15.5087L11.7522 15.5H14.2522Z"
      fill="url(#paint0_linear)"
    />
    <defs>
      <linearGradient
        id="paint0_linear"
        x1="13.0023"
        y1="25.5"
        x2="13.0023"
        y2="0.500244"
        gradientUnits="userSpaceOnUse"
      >
        <stop offset="0.326923" stopColor="#9333EA" />
        <stop offset="0.8125" stopColor="#977EFD" />
      </linearGradient>
    </defs>
  </svg>
)

// Tournament.jsx
const Tournament = () => (
  <svg
    width="30"
    height="30"
    viewBox="0 0 30 30"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M22.5 15C22.5 15.663 22.7634 16.2989 23.2322 16.7678C23.7011 17.2366 24.337 17.5 25 17.5C25.663 17.5 26.2989 17.2366 26.7678 16.7678C27.2366 16.2989 27.5 15.663 27.5 15C27.5 14.337 27.2366 13.7011 26.7678 13.2322C26.2989 12.7634 25.663 12.5 25 12.5C24.337 12.5 23.7011 12.7634 23.2322 13.2322C22.7634 13.7011 22.5 14.337 22.5 15ZM22.5 15H18.75C18.4185 15 18.1005 15.1317 17.8661 15.3661C17.6317 15.6005 17.5 15.9185 17.5 16.25V23.75C17.5 24.0815 17.6317 24.3995 17.8661 24.6339C18.1005 24.8683 18.4185 25 18.75 25H22.5M22.5 25C22.5 25.663 22.7634 26.2989 23.2322 26.7678C23.7011 27.2366 24.337 27.5 25 27.5C25.663 27.5 26.2989 27.2366 26.7678 26.7678C27.2366 26.2989 27.5 25.663 27.5 25C27.5 24.337 27.2366 23.7011 26.7678 23.2322C26.2989 22.7634 25.663 22.5 25 22.5C24.337 22.5 23.7011 22.7634 23.2322 23.2322C22.7634 23.7011 22.5 24.337 22.5 25ZM27.5 5C27.5 5.66304 27.2366 6.29893 26.7678 6.76777C26.2989 7.23661 25.663 7.5 25 7.5C24.337 7.5 23.7011 7.23661 23.2322 6.76777C22.7634 6.29893 22.5 5.66304 22.5 5C22.5 4.33696 22.7634 3.70107 23.2322 3.23223C23.7011 2.76339 24.337 2.5 25 2.5C25.663 2.5 26.2989 2.76339 26.7678 3.23223C27.2366 3.70107 27.5 4.33696 27.5 5ZM7.5 12.5C7.5 13.163 7.23661 13.7989 6.76777 14.2678C6.29893 14.7366 5.66304 15 5 15C4.33696 15 3.70107 14.7366 3.23223 14.2678C2.76339 13.7989 2.5 13.163 2.5 12.5C2.5 11.837 2.76339 11.2011 3.23223 10.7322C3.70107 10.2634 4.33696 10 5 10C5.66304 10 6.29893 10.2634 6.76777 10.7322C7.23661 11.2011 7.5 11.837 7.5 12.5Z"
      stroke="white"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
    <path
      d="M22.5 5H13.75C13.4185 5 13.1005 5.1317 12.8661 5.36612C12.6317 5.60054 12.5 5.91848 12.5 6.25V18.75C12.5 19.0815 12.6317 19.3995 12.8661 19.6339C13.1005 19.8683 13.4185 20 13.75 20H16.25M12.5 12.5H7.5"
      stroke="white"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
  </svg>
);

const Referral = (props) => {
  return (
    <svg 
      width="30" 
      height="30" 
      viewBox="0 0 30 30" 
      fill="none" 
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path d="M15 6.875C13.8397 6.875 12.7269 7.33594 11.9064 8.15641C11.0859 8.97688 10.625 10.0897 10.625 11.25C10.625 12.4103 11.0859 13.5231 11.9064 14.3436C12.7269 15.1641 13.8397 15.625 15 15.625C16.1603 15.625 17.2731 15.1641 18.0936 14.3436C18.9141 13.5231 19.375 12.4103 19.375 11.25C19.375 10.0897 18.9141 8.97688 18.0936 8.15641C17.2731 7.33594 16.1603 6.875 15 6.875ZM23.75 10C23.05 10 22.4 10.1875 21.8375 10.525C22.025 12.3125 21.5 14.0875 20.425 15.475C21.05 16.675 22.3 17.5 23.75 17.5C24.7446 17.5 25.6984 17.1049 26.4017 16.4017C27.1049 15.6984 27.5 14.7446 27.5 13.75C27.5 12.7554 27.1049 11.8016 26.4017 11.0983C25.6984 10.3951 24.7446 10 23.75 10ZM6.25 10C5.25544 10 4.30161 10.3951 3.59835 11.0983C2.89509 11.8016 2.5 12.7554 2.5 13.75C2.5 14.7446 2.89509 15.6984 3.59835 16.4017C4.30161 17.1049 5.25544 17.5 6.25 17.5C7.7 17.5 8.95 16.675 9.575 15.475C8.48563 14.0678 7.97981 12.2952 8.1625 10.525C7.6 10.1875 6.95 10 6.25 10ZM23.125 22.8125C23.125 20.225 19.4875 18.125 15 18.125C10.5125 18.125 6.875 20.225 6.875 22.8125V25H23.125V22.8125ZM30 25V23.125C30 21.3875 27.6375 19.925 24.4375 19.5C25.175 20.35 25.625 21.525 25.625 22.8125V25H30ZM0 25H4.375V22.8125C4.375 21.525 4.825 20.35 5.5625 19.5C2.3625 19.925 0 21.3875 0 23.125V25Z" fill="white"/>
    </svg>
  );
};

const Sweetstakes = (props) => {
  return (
    <svg 
      width="30" 
      height="30" 
      viewBox="0 0 30 30" 
      fill="none" 
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_1056_1731)">
        <path d="M12.7769 7.29156L7.2908 12.7777L17.2214 22.7082L22.7075 17.2221L12.7769 7.29156ZM16.4401 24.2881L5.71094 13.5589C5.49103 13.339 5.38108 13.0786 5.38108 12.7777C5.38108 12.4767 5.49103 12.2163 5.71094 11.9964L11.9957 5.7117C12.204 5.50336 12.4644 5.3992 12.7769 5.3992C13.0894 5.3992 13.3498 5.50336 13.5582 5.7117L24.2873 16.4409C24.5072 16.6608 24.6172 16.9212 24.6172 17.2221C24.6172 17.523 24.5072 17.7835 24.2873 18.0034L18.0026 24.2881C17.7943 24.4964 17.5339 24.6006 17.2214 24.6006C16.9089 24.6006 16.6484 24.4964 16.4401 24.2881ZM1.00608 13.2291L16.7526 28.9929C17.1808 29.4212 17.7046 29.6353 18.3238 29.6353C18.943 29.6353 19.4667 29.4212 19.895 28.9929L22.0825 26.8054C21.4343 26.1573 21.1102 25.3703 21.1102 24.4443C21.1102 23.5184 21.4343 22.7314 22.0825 22.0832C22.7306 21.4351 23.5177 21.111 24.4436 21.111C25.3695 21.111 26.1565 21.4351 26.8047 22.0832L28.9748 19.8957C29.4031 19.4675 29.6172 18.9438 29.6172 18.3245C29.6172 17.7053 29.4031 17.1816 28.9748 16.7534L13.2283 1.0242C12.8001 0.595956 12.2763 0.381836 11.6571 0.381836C11.0379 0.381836 10.5142 0.595956 10.0859 1.0242L7.9158 3.19434C8.56395 3.84248 8.88802 4.62952 8.88802 5.55545C8.88802 6.48137 8.56395 7.26841 7.9158 7.91656C7.26765 8.56471 6.48062 8.88878 5.55469 8.88878C4.62876 8.88878 3.84173 8.56471 3.19358 7.91656L1.00608 10.0867C0.577837 10.5149 0.363716 11.0387 0.363716 11.6579C0.363716 12.2771 0.577837 12.8008 1.00608 13.2291Z" fill="white"/>
      </g>
      <defs>
        <clipPath id="clip0_1056_1731">
          <rect width="30" height="30" fill="white" transform="matrix(-1 0 0 1 30 0)"/>
        </clipPath>
      </defs>
    </svg>
  );
};

const Markertplace = (props) => {
  return (
    <svg 
      width="26" 
      height="24" 
      viewBox="0 0 26 24" 
      fill="none" 
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path d="M1.338 8H4.998L5.778 3.34C5.93516 2.63494 6.28032 1.98559 6.77683 1.46091C7.27334 0.936229 7.90267 0.555794 8.598 0.36C9.29684 0.136358 10.0244 0.0150998 10.758 0H15.238C15.9716 0.0150998 16.6991 0.136358 17.398 0.36C18.0933 0.555794 18.7227 0.936229 19.2192 1.46091C19.7157 1.98559 20.0608 2.63494 20.218 3.34L20.998 8H24.658C24.8155 7.99904 24.971 8.03532 25.1119 8.10586C25.2527 8.1764 25.3749 8.27922 25.4685 8.40594C25.5621 8.53266 25.6244 8.67969 25.6504 8.83506C25.6763 8.99043 25.6653 9.14973 25.618 9.3L21.858 21.9C21.6666 22.5087 21.2861 23.0405 20.7717 23.4181C20.2574 23.7958 19.6361 23.9996 18.998 24H6.998C6.36334 23.9954 5.7465 23.7896 5.23619 23.4123C4.72587 23.0349 4.34838 22.5054 4.158 21.9L0.397995 9.3C0.351227 9.15134 0.339851 8.9938 0.364777 8.83997C0.389702 8.68613 0.450237 8.54025 0.541553 8.41396C0.63287 8.28767 0.752439 8.18447 0.89072 8.1126C1.029 8.04073 1.18217 8.00217 1.338 8ZM18.958 8L18.238 3.66C18.1591 3.30565 17.976 2.983 17.7122 2.73352C17.4485 2.48404 17.1162 2.31914 16.758 2.26C16.266 2.104 15.754 2.018 15.238 2H10.758C10.234 2.01733 9.72066 2.104 9.21799 2.26C8.85981 2.31914 8.52749 2.48404 8.26376 2.73352C8.00002 2.983 7.81692 3.30565 7.738 3.66L7.038 8H19.038H18.958Z" fill="white"/>
    </svg>
  );
};


const LeaderBoard = (props) => {
  return (
    <svg 
      width="26" 
      height="24" 
      viewBox="0 0 26 24" 
      fill="none" 
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path d="M19.875 23.25H24.25C24.9375 23.25 25.5 22.6875 25.5 22V9.5C25.5 8.8125 24.9375 8.25 24.25 8.25H19.875C19.1875 8.25 18.625 8.8125 18.625 9.5V22C18.625 22.6875 19.1875 23.25 19.875 23.25ZM10.8125 0.75H15.1875C15.875 0.75 16.4375 1.3125 16.4375 2V22C16.4375 22.6875 15.875 23.25 15.1875 23.25H10.8125C10.125 23.25 9.5625 22.6875 9.5625 22V2C9.5625 1.3125 10.125 0.75 10.8125 0.75ZM1.75 10.75H6.125C6.8125 10.75 7.375 11.3125 7.375 12V22C7.375 22.6875 6.8125 23.25 6.125 23.25H1.75C1.0625 23.25 0.5 22.6875 0.5 22V12C0.5 11.3125 1.0625 10.75 1.75 10.75Z" fill="white"/>
    </svg>
  );
};

const Community = (props) => {
  return (
    <svg 
      width="30" 
      height="26" 
      viewBox="0 0 30 26" 
      fill="none" 
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path d="M14.9983 0.200195C16.2714 0.200195 17.4923 0.705908 18.3925 1.60608C19.2926 2.50626 19.7983 3.72716 19.7983 5.0002C19.7983 6.27323 19.2926 7.49413 18.3925 8.39431C17.4923 9.29448 16.2714 9.8002 14.9983 9.8002C13.7253 9.8002 12.5044 9.29448 11.6042 8.39431C10.7041 7.49413 10.1983 6.27323 10.1983 5.0002C10.1983 3.72716 10.7041 2.50626 11.6042 1.60608C12.5044 0.705908 13.7253 0.200195 14.9983 0.200195ZM22.9135 12.9938C22.9679 13.2541 22.9951 13.5229 22.9951 13.8002V19.4002C22.9962 20.5618 22.7438 21.7096 22.2554 22.7636C21.7671 23.8176 21.0547 24.7523 20.1679 25.5026L20.4415 25.5826C21.2534 25.8004 22.1003 25.8561 22.9337 25.7466C23.7671 25.637 24.5708 25.3644 25.2988 24.9442C26.0269 24.524 26.665 23.9645 27.1768 23.2977C27.6885 22.6309 28.064 21.8697 28.2815 21.0578L29.3167 17.1938C29.3983 16.8893 29.419 16.5718 29.3779 16.2593C29.3367 15.9468 29.2343 15.6455 29.0767 15.3726C28.9191 15.0997 28.7092 14.8605 28.4591 14.6686C28.209 14.4768 27.9236 14.3361 27.6191 14.2546L22.9135 12.9938ZM9.82234 25.5026C8.93554 24.7523 8.22314 23.8176 7.73483 22.7636C7.24653 21.7096 6.9941 20.5618 6.99514 19.4002V13.8002C6.99621 13.5229 7.02288 13.2541 7.07514 12.9938L2.37114 14.2546C1.75655 14.4196 1.23263 14.8219 0.914591 15.373C0.596548 15.9242 0.51042 16.5791 0.675142 17.1938L1.71034 21.0578C1.93417 21.8927 2.32481 22.6737 2.85869 23.3535C3.39258 24.0333 4.05865 24.5979 4.81672 25.0133C5.57479 25.4287 6.40915 25.6862 7.26945 25.7703C8.12976 25.8544 8.99819 25.7633 9.82234 25.5026ZM4.59834 3.4002C5.65921 3.4002 6.67662 3.82162 7.42677 4.57177C8.17692 5.32191 8.59834 6.33933 8.59834 7.4002C8.59834 8.46106 8.17692 9.47848 7.42677 10.2286C6.67662 10.9788 5.65921 11.4002 4.59834 11.4002C3.53748 11.4002 2.52006 10.9788 1.76991 10.2286C1.01977 9.47848 0.598343 8.46106 0.598343 7.4002C0.598343 6.33933 1.01977 5.32191 1.76991 4.57177C2.52006 3.82162 3.53748 3.4002 4.59834 3.4002ZM25.3983 3.4002C26.4592 3.4002 27.4766 3.82162 28.2268 4.57177C28.9769 5.32191 29.3983 6.33933 29.3983 7.4002C29.3983 8.46106 28.9769 9.47848 28.2268 10.2286C27.4766 10.9788 26.4592 11.4002 25.3983 11.4002C24.3375 11.4002 23.3201 10.9788 22.5699 10.2286C21.8198 9.47848 21.3983 8.46106 21.3983 7.4002C21.3983 6.33933 21.8198 5.32191 22.5699 4.57177C23.3201 3.82162 24.3375 3.4002 25.3983 3.4002ZM18.9983 11.4002C19.6349 11.4002 20.2453 11.6531 20.6954 12.1031C21.1455 12.5532 21.3983 13.1637 21.3983 13.8002V19.4002C21.3983 21.0976 20.7241 22.7254 19.5238 23.9257C18.3236 25.1259 16.6957 25.8002 14.9983 25.8002C13.301 25.8002 11.6731 25.1259 10.4729 23.9257C9.27263 22.7254 8.59834 21.0976 8.59834 19.4002V13.8002C8.59834 13.1637 8.8512 12.5532 9.30129 12.1031C9.75137 11.6531 10.3618 11.4002 10.9983 11.4002H18.9983Z" fill="#D9D9D9"/>
    </svg>
  );
};



export default function RootSidebar() {
  const { isSidebarOpen } = useSidebar()
  const { navigateWithLoading } = useRouting()
  const [active, setActive] = useState("Home")

  const links = [
    { name: "Home", icon: HouseIcon, href: "/newhome" },
    { name: "Tournaments", icon: Tournament, href: "/tournaments" }, // Need high revamp
    { name: "Referral", icon: Referral, href: "/referral" },
    { name: "Sweepstake", icon: Sweetstakes, href: "/sweepstakes" },
    { name: "Marketplace", icon: Markertplace, href: "/shop" }, // Make screen for this
    { name: "Leaderboard", icon: LeaderBoard, href: "/leaderboard" },
    { name: "Rewards", icon: Sparkles, href: "/rewards" },
    { name: "Communities", icon: Community, href: "/communities" },
  ]
  // { name: "Payment", icon: Wallet, href: "/payment" },
  // { name: "Settings", icon: Settings, href: "/settings" }, //Make screen for this // Done just make api call for this
  // { name: "login", icon: LogIn, href: "/login" },
  return (
    <>
      {isSidebarOpen ? (
        <div className="scrollbar-hide fixed left-0 w-64 h-screen bg-[#2b0a59] text-white z-50 overflow-y-auto">
          <aside className="w-full p-4 text-white flex flex-col">
            <nav className="flex flex-col gap-2 flex-grow overflow-y-auto">
              {links?.map(({ name, href, icon: Icon }) => (
                <button
                  key={name}
                  onClick={() => {
                    setActive(name)
                    navigateWithLoading(href)
                  }}
                  className={`flex items-center gap-2 px-4 py-2 rounded transition-all ${
                    active === name
                      ? "bg-[#7A59FF] text-white"
                      : "bg-[#4c2d80] hover:bg-[#5d37a2] text-white/80"
                  }`}
                >
                  <Icon />
                  {/* <Icon size={20} /> */}
                  <span className="text-sm">{name}</span>
                </button>
              ))}
            </nav>
            {/* <Discount />
            <FriendsOnline />
            <RecentlyPlayed /> */}
          </aside>
        </div>
      ) : (
        <div className="text-white scrollbar-hide  fixed w-[84px] h-screen bg-[#2b0a59] z-50 mobile">
          <aside className="w-full p-2 text-white flex flex-col">
            <nav className="flex flex-col gap-2 flex-grow overflow-hidden">
              {links.map(({ name, href, icon: Icon }) => (
                <button
                  key={name + "mobile"}
                  onClick={() => {
                    setActive(name)
                    navigateWithLoading(href)
                  }}
                  className={`flex flex-col items-center gap-1 p-2 rounded transition-all `}
                >
                  <Icon /> 
                  <p className="text-xs">

                  {name}
                  </p>
                </button>
              ))}
            </nav>
          </aside>
        </div>
      )}
    </>
  )
}
